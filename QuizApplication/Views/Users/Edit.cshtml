@model QuizApplication.Models.Users
@{
    ViewData["Title"] = "Edit User";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10">
            <!-- Page Header -->
            <div class="d-flex align-items-center justify-content-between mb-4">
                <div>
                    <h2 class="mb-0">
                        <i class="fas fa-user-edit text-warning me-2"></i>Edit User
                    </h2>
                    <p class="text-muted mb-0">Update user account information and permissions</p>
                </div>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="@Url.Action("Dashboard", "Users")">Dashboard</a></li>
                        <li class="breadcrumb-item"><a href="@Url.Action("Manage", "Users")">Manage Users</a></li>
                        <li class="breadcrumb-item active">Edit User</li>
                    </ol>
                </nav>
            </div>

            <!-- User Info Card -->
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-header bg-gradient-warning text-white py-3">
                    <div class="d-flex align-items-center">
                        <div class="@(Model.Role == "Admin" ? "bg-danger" : "bg-primary") text-white rounded-circle d-flex align-items-center justify-content-center me-3" style="width: 48px; height: 48px;">
                            <i class="fas fa-@(Model.Role == "Admin" ? "user-shield" : "user") fa-lg"></i>
                        </div>
                        <div>
                            <h5 class="card-title mb-0">@Model.Username</h5>
                            <small class="opacity-75">User ID: #@Model.Id</small>
                        </div>
                    </div>
                </div>
                
                <div class="card-body p-4">
                    <form asp-action="Edit" method="post" id="editUserForm">
                        @Html.HiddenFor(model => model.Id)
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        
                        <div class="row">
                            <!-- Left Column -->
                            <div class="col-md-6">
                                <!-- Username Field -->
                                <div class="form-floating mb-3">
                                    @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control", @placeholder = "Username" } })
                                    <label asp-for="Username">
                                        <i class="fas fa-user me-2"></i>Username
                                    </label>
                                    @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                                </div>

                                <!-- Email Field -->
                                <div class="form-floating mb-3">
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @type = "email", @placeholder = "Email" } })
                                    <label asp-for="Email">
                                        <i class="fas fa-envelope me-2"></i>Email Address
                                    </label>
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>

                                <!-- Role Selection -->
                                <div class="form-floating mb-3">
                                    @Html.DropDownListFor(model => model.Role, 
                                        new List<SelectListItem>
                                        {
                                            new SelectListItem { Text = "User", Value = "User" },
                                            new SelectListItem { Text = "Administrator", Value = "Admin" }
                                        }, 
                                        new { @class = "form-select", @id = "roleSelect" })
                                    <label asp-for="Role">
                                        <i class="fas fa-shield-alt me-2"></i>User Role
                                    </label>
                                    @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <!-- Right Column -->
                            <div class="col-md-6">
                                <!-- Password Section -->
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <label class="form-label">
                                            <i class="fas fa-lock me-2"></i>Password Management
                                        </label>
                                        <button type="button" class="btn btn-outline-secondary btn-sm" id="togglePasswordFields">
                                            <i class="fas fa-key me-1"></i>Change Password
                                        </button>
                                    </div>
                                    
                                    <div id="passwordFields" style="display: none;">
                                        <div class="form-floating mb-3">
                                            <input type="password" id="newPassword" name="Password" class="form-control" placeholder="New Password" />
                                            <label for="newPassword">New Password</label>
                                            <div class="form-text">Leave blank to keep current password</div>
                                        </div>
                                        
                                        <div class="form-floating mb-3">
                                            <input type="password" id="confirmPassword" class="form-control" placeholder="Confirm Password" />
                                            <label for="confirmPassword">Confirm New Password</label>
                                        </div>
                                        
                                        <!-- Password Strength Indicator -->
                                        <div class="password-strength mb-3" style="display: none;">
                                            <div class="progress" style="height: 8px;">
                                                <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                                            </div>
                                            <small class="strength-text text-muted">Password strength</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Account Status Info -->
                                <div class="card bg-light border-0">
                                    <div class="card-body p-3">
                                        <h6 class="card-title">
                                            <i class="fas fa-info-circle text-info me-2"></i>Account Information
                                        </h6>
                                        <div class="row text-sm">
                                            <div class="col-6">
                                                <strong>Current Role:</strong>
                                            </div>
                                            <div class="col-6">
                                                <span class="badge @(Model.Role == "Admin" ? "bg-danger" : "bg-primary")">
                                                    <i class="fas fa-@(Model.Role == "Admin" ? "crown" : "user") me-1"></i>
                                                    @Model.Role
                                                </span>
                                            </div>
                                            <div class="col-6 mt-2">
                                                <strong>User ID:</strong>
                                            </div>
                                            <div class="col-6 mt-2">
                                                <code>#@Model.Id</code>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Role Change Warning -->
                        <div class="alert alert-warning mt-3" id="roleWarning" style="display: none;">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>Warning:</strong> Changing user roles will affect their access permissions and available features.
                        </div>

                        <!-- Action Buttons -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <a href="@Url.Action("Manage", "Users")" class="btn btn-outline-secondary">
                                            <i class="fas fa-arrow-left me-2"></i>Back to Manage
                                        </a>
                                        <a href="@Url.Action("Details", "Users", new { id = Model.Id })" class="btn btn-outline-info ms-2">
                                            <i class="fas fa-eye me-2"></i>View Details
                                        </a>
                                    </div>
                                    <div>
                                        <button type="submit" class="btn btn-success">
                                            <i class="fas fa-save me-2"></i>Update User
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const roleSelect = document.getElementById('roleSelect');
            const roleWarning = document.getElementById('roleWarning');
            const originalRole = '@Model.Role';
            const togglePasswordBtn = document.getElementById('togglePasswordFields');
            const passwordFields = document.getElementById('passwordFields');
            const newPasswordField = document.getElementById('newPassword');
            const confirmPasswordField = document.getElementById('confirmPassword');
            const strengthIndicator = document.querySelector('.password-strength');
            const progressBar = document.querySelector('.progress-bar');
            const strengthText = document.querySelector('.strength-text');

            // Role change warning
            if (roleSelect && roleWarning) {
                roleSelect.addEventListener('change', function() {
                    if (this.value !== originalRole) {
                        roleWarning.style.display = 'block';
                    } else {
                        roleWarning.style.display = 'none';
                    }
                });
            }

            // Toggle password fields
            if (togglePasswordBtn && passwordFields) {
                togglePasswordBtn.addEventListener('click', function() {
                    if (passwordFields.style.display === 'none') {
                        passwordFields.style.display = 'block';
                        this.innerHTML = '<i class="fas fa-times me-1"></i>Cancel';
                        this.className = 'btn btn-outline-danger btn-sm';
                    } else {
                        passwordFields.style.display = 'none';
                        this.innerHTML = '<i class="fas fa-key me-1"></i>Change Password';
                        this.className = 'btn btn-outline-secondary btn-sm';
                        newPasswordField.value = '';
                        confirmPasswordField.value = '';
                        strengthIndicator.style.display = 'none';
                    }
                });
            }

            // Password strength checker
            if (newPasswordField && strengthIndicator) {
                newPasswordField.addEventListener('input', function() {
                    const password = this.value;
                    if (password.length > 0) {
                        strengthIndicator.style.display = 'block';
                        const strength = calculatePasswordStrength(password);
                        updateStrengthIndicator(strength);
                    } else {
                        strengthIndicator.style.display = 'none';
                    }
                });
            }

            // Password confirmation validation
            if (confirmPasswordField && newPasswordField) {
                confirmPasswordField.addEventListener('input', function() {
                    if (this.value !== newPasswordField.value) {
                        this.setCustomValidity('Passwords do not match');
                    } else {
                        this.setCustomValidity('');
                    }
                });
            }

            function calculatePasswordStrength(password) {
                let strength = 0;
                if (password.length >= 8) strength += 25;
                if (/[a-z]/.test(password)) strength += 25;
                if (/[A-Z]/.test(password)) strength += 25;
                if (/[0-9]/.test(password)) strength += 15;
                if (/[^a-zA-Z0-9]/.test(password)) strength += 10;
                return Math.min(strength, 100);
            }

            function updateStrengthIndicator(strength) {
                let className = 'bg-danger';
                let text = 'Weak';
                
                if (strength >= 70) {
                    className = 'bg-success';
                    text = 'Strong';
                } else if (strength >= 40) {
                    className = 'bg-warning';
                    text = 'Medium';
                }
                
                progressBar.style.width = strength + '%';
                progressBar.className = 'progress-bar ' + className;
                strengthText.textContent = text + ' (' + strength + '%)';
                strengthText.className = 'strength-text ' + className.replace('bg-', 'text-');
            }

            // Form validation
            document.getElementById('editUserForm').addEventListener('submit', function(e) {
                const newPassword = newPasswordField.value;
                const confirmPassword = confirmPasswordField.value;
                
                if (passwordFields.style.display !== 'none' && newPassword) {
                    if (newPassword !== confirmPassword) {
                        e.preventDefault();
                        alert('Passwords do not match!');
                        return false;
                    }
                    
                    if (newPassword.length < 6) {
                        e.preventDefault();
                        alert('Password must be at least 6 characters long!');
                        return false;
                    }
                }
            });
        });
    </script>
    
    <style>
        .bg-gradient-warning {
            background: linear-gradient(45deg, #ffc107, #e0a800);
        }
        
        .form-floating {
            position: relative;
        }
        
        .form-floating label {
            color: #6c757d;
        }
        
        .breadcrumb {
            background-color: transparent;
            padding: 0;
            margin: 0;
        }
        
        .breadcrumb-item + .breadcrumb-item::before {
            content: ">";
            color: #6c757d;
        }
        
        .card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        
        .text-sm {
            font-size: 0.875rem;
        }
        
        .shadow-lg {
            box-shadow: 0 1rem 3rem rgba(0,0,0,0.175);
        }
        
        .progress {
            border-radius: 10px;
            overflow: hidden;
        }
        
        .progress-bar {
            transition: width 0.3s ease, background-color 0.3s ease;
        }
        
        .strength-text {
            font-size: 0.75rem;
            margin-top: 0.25rem;
        }
        
        .alert {
            border: none;
            border-radius: 10px;
        }
        
        code {
            color: #e83e8c;
            background-color: #f8f9fa;
            padding: 0.2rem 0.4rem;
            border-radius: 0.25rem;
        }
    </style>
}
